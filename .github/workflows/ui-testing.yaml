# .github/workflows/advanced-ui-testing.yaml
name: UI Tests

on:
  pull_request:
    branches:
      - main

  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to test against"
        required: true
        default: "staging"
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  selenium-matrix-tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        browser: [chrome, firefox]
        resolution:
          - { name: "desktop-full", width: 1920, height: 1080 }
          - { name: "laptop", width: 1366, height: 768 }
          - { name: "tablet", width: 1024, height: 768 }
          - { name: "mobile", width: 375, height: 667 }
      fail-fast: false

    name: Test ${{ matrix.browser }} - ${{ matrix.resolution.name }}

    steps:
      - name: Checkout OllamaUITesting
        uses: actions/checkout@v4
        with:
          repository: yosefshawah/OllamaUITesting
          token: ${{ secrets.GITHUB_TOKEN }}
          path: .
          clean: true

      - name: Debug repo path
        run: |
          pwd
          ls -la

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-pytest

      - name: Install Chrome and ChromeDriver
        if: matrix.browser == 'chrome'
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Install Firefox and GeckoDriver
        if: matrix.browser == 'firefox'
        run: |
          sudo apt-get update
          sudo apt-get install -y wget tar
          sudo snap remove firefox || true
          wget -O firefox.tar.xz "https://download.mozilla.org/?product=firefox-latest&os=linux64&lang=en-US"
          tar xJf firefox.tar.xz
          sudo mv firefox /opt/firefox
          sudo ln -s /opt/firefox/firefox /usr/local/bin/firefox
          wget https://github.com/mozilla/geckodriver/releases/latest/download/geckodriver-v0.36.0-linux64.tar.gz
          tar -xvzf geckodriver-v0.36.0-linux64.tar.gz
          sudo mv geckodriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/geckodriver

      - name: Run Selenium tests
        env:
          HEADLESS: true
          BROWSER: ${{ matrix.browser }}
          SCREEN_WIDTH: ${{ matrix.resolution.width }}
          SCREEN_HEIGHT: ${{ matrix.resolution.height }}
          OLLAMA_URL: http://52.18.93.49:3000/
          TEST_NAME: ${{ matrix.browser }}-${{ matrix.resolution.name }}
        run: |
          pytest tests/ -v --tb=short --alluredir=allure-results

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-${{ matrix.browser }}-${{ matrix.resolution.name }}
          path: allure-results/
          retention-days: 30

  generate-allure-report:
    runs-on: ubuntu-latest
    needs: selenium-matrix-tests
    if: always()

    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Download all Allure results
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-*
          path: allure-results
          merge-multiple: true

      - name: Get Allure history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "microsoft"
          java-version: "17"

      - name: Setup Allure
        run: |
          curl -o allure-commandline-2.25.0.tgz -Ls https://github.com/allure-framework/allure2/releases/download/2.25.0/allure-commandline-2.25.0.tgz
          tar -zxvf allure-commandline-2.25.0.tgz -C /opt/
          sudo ln -s /opt/allure-2.25.0/bin/allure /usr/bin/allure

      - name: Generate Allure Report
        run: |
          # Copy history if exists
          if [ -d "gh-pages/allure-history" ]; then
            cp -r gh-pages/allure-history allure-results/history
          fi

          # Generate report
          allure generate allure-results --clean --output allure-report

          # Ensure proper permissions and structure
          chmod -R 755 allure-report

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: allure-report

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
